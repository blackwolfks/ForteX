
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://fewcmtozntpedrsluawj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZld2NtdG96bnRwZWRyc2x1YXdqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE5MDQ5MzYsImV4cCI6MjA1NzQ4MDkzNn0.4xh1npp9zRyXgXkBGB9auWw3gxOoajDYS8sAIopB-To";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Make sure we have a valid API key
if (!SUPABASE_PUBLISHABLE_KEY) {
  console.error("Missing Supabase API key! Authentication and database operations will fail.");
}

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
  },
  global: {
    headers: {
      'apikey': SUPABASE_PUBLISHABLE_KEY,
      'Content-Type': 'application/json',
    },
  },
  db: {
    schema: 'public',
  }
});

// Export an explicit function for RPC calls to ensure API key is always included
export const callRPC = async <T>(
  functionName: string,
  params: Record<string, any> = {}
): Promise<{ data: T | null; error: Error | null }> => {
  console.log(`Calling RPC function: ${functionName} with params:`, params);
  
  try {
    const { data, error } = await supabase.rpc(functionName, params, {
      headers: {
        'apikey': SUPABASE_PUBLISHABLE_KEY,
        'Content-Type': 'application/json',
      }
    });

    if (error) {
      console.error(`Error in RPC call to ${functionName}:`, error);
      return { data: null, error };
    }

    console.log(`RPC call to ${functionName} successful:`, data);
    return { data, error: null };
  } catch (error) {
    console.error(`Exception in RPC call to ${functionName}:`, error);
    return { data: null, error: error as Error };
  }
};
